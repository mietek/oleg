functor LegoLexFun(structure Tokens:Lego_TOKENS
                            structure Pos:POS
                            structure Infix: INFIX):LEXER=
   struct
    structure UserDeclarations =
      struct
(* lego.lex *)

structure Tokens = Tokens
open Tokens

structure Pos = Pos
open Pos

open Infix

type pos = Pos.pos
type svalue = Tokens.svalue
type ('a,'b) token = ('a,'b) Tokens.token
type lexresult = (svalue,pos) token

fun eof() = EOF(!lno,!lno)


structure KeyWord : sig
		      val find : string -> ((pos*pos)->lexresult) option
	  	    end =
  struct

	val TableSize = 401
	val HashFactor = 7

	val hash = fn s =>
	   fold (fn (c,v)=>(v*HashFactor+(ord c)) mod TableSize) (explode s) 0


	val HashTable = Array.array(TableSize,nil) :
		 (string * ((pos*pos)->lexresult)) list Array.array


	val add = fn (s,v) =>
	 let val i = hash s
	 in Array.update(HashTable,i,(s,v) :: (Array.sub(HashTable, i)))
	 end

        val find = fn s =>
	  let val i = hash s
	      fun f ((key,v)::r) = if s=key then SOME v else f r
	        | f nil = NONE
	  in  f (Array.sub(HashTable, i))
	  end
 
	val _ = 
	    (List.app add
        [("allE", ALLE),
         ("allI", ALLI),
         ("andE", ANDE),
         ("andI", ANDI),
         ("as", AS),
         ("Abst", ABST),
         ("AbstEq",ABSTEQ),
	 ("AnnotateOn", ANNOTATEON),
	 ("AnnotateOff", ANNOTATEOFF),
	 ("Assumption", ASSUMPTION),
         ("BoxTerm", BOXTERM),
	 ("Double", DOUBLE),
         ("Cases", CASES),
         ("Cd", CD),
         ("Claim", CLAIM),
         ("Clobber", CLOBBER),
	 ("Configure", CONFIG),
         ("Ctxt", CTXT),
         ("Cut", CUT),
	 ("Fields", FIELDS),
         ("Inductive", INDUCTIVE),
         ("NoReductions", NOREDS),
         ("Parameters", PARAMS),
         ("Constructors", CONSTRS),
         ("Dale", DALE),
         ("Decls", DECLS),
         ("Delete",DELETE),
         ("Discharge", DISCHARGE),
         ("DischargeKeep", DISCHARGEKEEP),
         ("Dnf", DNF),
	 ("Drop", EOF),
         ("echo", ECHO),
         ("Eduardo", EDUARDO),
         ("Elim", ELIM),
         ("Equality", EQUALITY),
         ("Equiv", EQUIV),
         ("exI", EXI),
         ("exE", EXE),
         ("ExpAll", EXPALL),
         ("Expand", EXPAND),
         ("ExportState", EXPORTST),
         ("EndCase", ENDCASE),
         ("Forget", FORGET),
         ("ForgetMark", FORGETMARK),
         ("Freeze", FREEZE),
         ("From", FROM),
         ("Unfreeze", UNFREEZE),
         ("Gen", GEN),
         ("Generate", GENERATE),
         ("Goal", GOAL),
         ("GoalDef", GOALDEF),
         ("Help", HELP),
         ("Hnf", HNF),
         ("Hyps", HYPS),
         ("Include", INCLUDE),
         ("Interactive", INTERACTIVE),
         ("Immed", IMMED),
         ("impE", IMPE),
         ("impI", IMPI),
         ("Init", INIT),
         ("Intros", INTROS),
         ("intros", iNTROS),
         ("Import", IMPORT),
         ("Induction", INDUCTION),
         ("Infix", INFIX),
         ("Inversion", INVERSION),
         ("Invert", INVERT),
         ("KillRef", KILLREF),
         ("KJunify", KJUNIFY),
         ("Label", LABEL),
         ("Logic", LOGIC),
         ("left", LEFT),
         ("line", LINE),
         ("Load", LOAD),
         ("Marks", MARKS),
         ("Make", MAKE),
         ("Memo", MEMO),
         ("Module", MODULE),
         ("Next", NEXT),
         ("Names", NAMES),
         ("Normal", NORMAL),
         ("NormTyp", NORMTYP),
         ("notE", NOTE),
         ("notI", NOTI),
         ("orE", ORE),
         ("orIL", ORIL),
         ("orIR", ORIR),
         ("Pbp", PBP),
         ("PbpHyp", PBPHYP),
	 ("PrettyOff", PPOFF),
	 ("PrettyOn", PPON),
	 ("PrettyWidth", PPLINEWIDTH),
         ("Prf", PRF),
         ("Program", PROGRAM),
         ("Prop", PROP),
         ("Pwd", PWD),
         ("Qnify", QNIFY),
	 ("Qrepl", QREPL),
         ("Refine", REFINE),
         ("Require",REQUIRE),
         ("Reload", RELOAD),
         ("right", RIGHT),
         ("Save", SAVE),
         ("SaveUnfrozen", SAVEUNFROZ),
         ("SaveFrozen", SAVEFROZEN),
         ("SaveObjectsOn", SAVEOBJECTSON),
         ("SaveObjectsOff", SAVEOBJECTSOFF),
         ("SaveReductions", SAVEREDUCTIONS),
         ("Relation", RELATION),
         ("Theorems", THEOREMS),
         ("Theory", THRY),
	 ("StartTheory", STTHEORY),
	 ("EndTheory", ENDTHEORY),
         ("Record",RECORD),
         ("StartTimer", STARTTIMER),
         ("PrintTimer", PRINTTIMER),
	 ("Else", TACTICELSE),
	 ("Fail", TACTICFAIL),
	 ("For", TACTICFOR),
	 ("Repeat", TACTICREPEAT),
	 ("Succeed", TACTICSUCCEED),
	 ("Then", TACTICTHEN),
	 ("Try", TACTICTRY),
         ("TReg", TREG),
         ("Type", TYPE),
         ("ElimOver", TYPESTR),
         ("TypeOf", TYPEOF),
         ("Undo", UNDO),
         ("Unsafe", UNSAFE),
	 ("UTac", UTAC),
         ("VReg", VREG),
         ("Wave", WAVE)
        ]) 
   end
   open KeyWord


val commentLevel = ref 0

fun makeInt (s : string) =
    (revfold (fn (c,a) => a*10 + (ord c - ord("0"))) (explode s) 0)


end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s0 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s1 =
"\007\007\007\007\007\007\007\007\007\093\095\007\007\007\007\007\
\\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\007\
\\093\089\086\085\074\071\069\007\066\065\063\061\060\057\054\052\
\\050\050\050\050\050\050\050\050\050\050\049\048\047\044\043\041\
\\039\015\015\015\015\015\015\015\015\015\015\015\015\015\015\015\
\\015\015\015\015\015\015\015\015\015\015\015\037\036\035\034\033\
\\007\015\015\015\015\015\015\015\015\015\015\015\015\015\015\019\
\\015\015\015\015\015\015\015\015\015\015\015\013\010\009\008\007\
\\007"
val s3 =
"\096\096\096\096\096\096\096\096\096\096\101\096\096\096\096\096\
\\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\
\\096\096\096\096\096\096\096\096\099\096\097\096\096\096\096\096\
\\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\
\\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\
\\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\
\\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\
\\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\096\
\\096"
val s5 =
"\102\102\102\102\102\102\102\102\102\102\103\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\102\
\\102"
val s10 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\011\000\000\000\
\\000"
val s13 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s15 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\018\000\000\017\000\000\000\000\000\000\000\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\017\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
val s17 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\018\000\000\017\000\000\000\000\000\000\000\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\000\000\000\000\017\
\\000\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\
\\000"
val s18 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\
\\000\017\017\017\017\017\017\017\017\017\017\017\017\017\017\017\
\\017\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\
\\000"
val s19 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\018\000\000\017\000\000\000\000\000\000\000\000\
\\017\017\017\017\017\017\017\017\017\017\000\000\000\000\000\000\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\000\000\000\017\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\020\016\016\016\016\016\016\016\016\016\016\000\000\000\000\000\
\\000"
val s20 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\018\000\031\017\000\000\022\022\022\022\022\030\
\\017\017\017\017\017\017\017\017\017\017\029\000\028\027\026\000\
\\024\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\023\000\000\017\
\\000\016\016\016\016\016\016\016\016\016\016\016\016\016\016\016\
\\016\016\016\016\016\016\016\016\016\016\016\000\021\000\000\000\
\\000"
val s21 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s23 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s24 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\
\\025\025\025\025\025\025\025\025\025\025\025\000\000\000\000\000\
\\000\025\025\025\025\025\025\025\025\025\025\025\025\025\025\025\
\\025\025\025\025\025\025\025\025\025\025\025\000\000\000\000\000\
\\000"
val s26 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s27 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s28 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s29 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\022\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s30 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\022\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s31 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\000\000\000\000\000\
\\000\032\032\032\032\032\032\032\032\032\032\032\032\032\032\032\
\\032\032\032\032\032\032\032\032\032\032\032\000\000\000\000\000\
\\000"
val s36 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s37 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\038\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s39 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\
\\040\040\040\040\040\040\040\040\040\040\040\000\000\000\000\000\
\\000\040\040\040\040\040\040\040\040\040\040\040\040\040\040\040\
\\040\040\040\040\040\040\040\040\040\040\040\000\000\000\000\000\
\\000"
val s41 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\042\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s43 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s44 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s45 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\046\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s47 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s49 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\012\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s50 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\051\051\051\051\051\051\051\051\051\051\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s52 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\053\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s54 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\056\055\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s57 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\059\059\059\059\059\059\059\059\059\059\000\000\000\000\058\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s59 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\059\059\059\059\059\059\059\059\059\059\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s61 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\062\062\062\062\062\062\062\062\062\062\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s63 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\064\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s66 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\068\000\000\000\000\000\000\000\000\067\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s69 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\000\000\000\000\000\
\\000\070\070\070\070\070\070\070\070\070\070\070\070\070\070\070\
\\070\070\070\070\070\070\070\070\070\070\070\000\000\000\000\000\
\\000"
val s71 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\073\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\072\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s74 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\081\075\075\075\075\075\075\075\075\
\\075\075\075\077\075\075\075\075\075\075\075\076\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000"
val s75 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\075\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\075\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000"
val s77 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\075\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\075\
\\000\078\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000"
val s78 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\075\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\075\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\079\075\075\075\075\000\000\000\000\000\
\\000"
val s79 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\075\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\075\
\\000\075\075\075\075\080\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000"
val s81 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\075\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\075\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\082\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000"
val s82 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\075\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\075\
\\000\083\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000"
val s83 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\075\000\000\075\000\000\000\000\000\000\000\000\
\\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\000\
\\000\075\075\075\075\075\075\075\075\075\075\075\075\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\075\
\\000\075\075\075\075\075\075\075\075\075\075\075\084\075\075\075\
\\075\075\075\075\075\075\075\075\075\075\075\000\000\000\000\000\
\\000"
val s86 =
"\087\087\087\087\087\087\087\087\087\087\000\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\088\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\087\
\\087"
val s89 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\092\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\091\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\090\000\000\
\\000"
val s93 =
"\000\000\000\000\000\000\000\000\000\094\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\094\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s97 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\098\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
val s99 =
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\100\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
in Vector.vector
[{fin = [], trans = s0},
{fin = [], trans = s1},
{fin = [], trans = s1},
{fin = [], trans = s3},
{fin = [], trans = s3},
{fin = [], trans = s5},
{fin = [], trans = s5},
{fin = [(N 195)], trans = s0},
{fin = [(N 93),(N 195)], trans = s0},
{fin = [(N 83),(N 195)], trans = s0},
{fin = [(N 17),(N 195)], trans = s10},
{fin = [(N 15)], trans = s0},
{fin = [(N 135)], trans = s0},
{fin = [(N 50),(N 195)], trans = s13},
{fin = [(N 110)], trans = s0},
{fin = [(N 177),(N 185),(N 195)], trans = s15},
{fin = [(N 177),(N 185)], trans = s15},
{fin = [(N 185)], trans = s17},
{fin = [], trans = s18},
{fin = [(N 177),(N 185),(N 195)], trans = s19},
{fin = [(N 177),(N 185)], trans = s20},
{fin = [], trans = s21},
{fin = [(N 174)], trans = s0},
{fin = [], trans = s23},
{fin = [], trans = s24},
{fin = [(N 174)], trans = s24},
{fin = [], trans = s26},
{fin = [], trans = s27},
{fin = [], trans = s28},
{fin = [], trans = s29},
{fin = [(N 174)], trans = s30},
{fin = [], trans = s31},
{fin = [(N 174)], trans = s31},
{fin = [(N 95),(N 195)], trans = s0},
{fin = [(N 41),(N 195)], trans = s0},
{fin = [(N 89),(N 195)], trans = s0},
{fin = [(N 12),(N 195)], trans = s36},
{fin = [(N 79),(N 195)], trans = s37},
{fin = [(N 98)], trans = s0},
{fin = [(N 195)], trans = s39},
{fin = [(N 135)], trans = s39},
{fin = [(N 81),(N 195)], trans = s41},
{fin = [(N 46)], trans = s0},
{fin = [(N 85),(N 195)], trans = s43},
{fin = [(N 43),(N 195)], trans = s44},
{fin = [(N 135)], trans = s45},
{fin = [(N 25)], trans = s0},
{fin = [(N 52),(N 195)], trans = s47},
{fin = [(N 91),(N 195)], trans = s0},
{fin = [(N 19),(N 195)], trans = s49},
{fin = [(N 138),(N 195)], trans = s50},
{fin = [(N 138)], trans = s50},
{fin = [(N 135),(N 195)], trans = s52},
{fin = [(N 7)], trans = s0},
{fin = [(N 39),(N 135),(N 195)], trans = s54},
{fin = [(N 37)], trans = s0},
{fin = [(N 34)], trans = s0},
{fin = [(N 135),(N 195)], trans = s57},
{fin = [(N 10)], trans = s0},
{fin = [(N 146)], trans = s59},
{fin = [(N 21),(N 135),(N 195)], trans = s0},
{fin = [(N 135),(N 195)], trans = s61},
{fin = [(N 142)], trans = s61},
{fin = [(N 135),(N 195)], trans = s63},
{fin = [(N 60)], trans = s0},
{fin = [(N 87),(N 195)], trans = s0},
{fin = [(N 54),(N 195)], trans = s66},
{fin = [(N 28)], trans = s0},
{fin = [(N 104)], trans = s0},
{fin = [(N 195)], trans = s69},
{fin = [(N 135)], trans = s69},
{fin = [(N 77),(N 195)], trans = s71},
{fin = [(N 31)], trans = s0},
{fin = [(N 75)], trans = s0},
{fin = [(N 195)], trans = s74},
{fin = [(N 193)], trans = s75},
{fin = [(N 57)], trans = s0},
{fin = [(N 193)], trans = s77},
{fin = [(N 193)], trans = s78},
{fin = [(N 193)], trans = s79},
{fin = [(N 66),(N 193)], trans = s75},
{fin = [(N 193)], trans = s81},
{fin = [(N 193)], trans = s82},
{fin = [(N 193)], trans = s83},
{fin = [(N 72),(N 193)], trans = s75},
{fin = [(N 48),(N 195)], trans = s0},
{fin = [(N 195)], trans = s86},
{fin = [], trans = s86},
{fin = [(N 150)], trans = s0},
{fin = [(N 195)], trans = s89},
{fin = [(N 113)], trans = s0},
{fin = [(N 101)], trans = s0},
{fin = [(N 107)], trans = s0},
{fin = [(N 4),(N 195)], trans = s93},
{fin = [(N 4)], trans = s93},
{fin = [(N 1)], trans = s0},
{fin = [(N 205)], trans = s0},
{fin = [(N 205)], trans = s97},
{fin = [(N 201)], trans = s0},
{fin = [(N 205)], trans = s99},
{fin = [(N 198)], trans = s0},
{fin = [(N 203)], trans = s0},
{fin = [], trans = s5},
{fin = [(N 208)], trans = s0}]
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val C = STARTSTATE 3;
val D = STARTSTATE 5;
val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

fun makeLexer yyinput = 
let 
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref 1		(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let val yytext = substring(!yyb,i0,i-i0)
			     val yypos = i0+ !yygone
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  1 => (inc_lno(); lex())
| 10 => (ARROW(!lno,!lno))
| 101 => (ENDCASE(!lno,!lno))
| 104 => (TAGBEGIN(!lno,!lno))
| 107 => (TAGEND(!lno,!lno))
| 110 => (TARGBEGIN(!lno,!lno))
| 113 => (TARGEND(!lno,!lno))
| 12 => (BACKSLASH(!lno,!lno))
| 135 => (
   (case Infix.infix_data yytext of 
     (LAssoc,n) => (nth [INFIX_L1, INFIX_L2, INFIX_L3, INFIX_L4,INFIX_L5,
                        INFIX_L6, INFIX_L7, INFIX_L8, INFIX_L9] n)
                        (yytext,!lno,!lno)
  |  (RAssoc,n) => (nth [INFIX_R1, INFIX_R2, INFIX_R3, INFIX_R4,INFIX_R5,
                        INFIX_R6, INFIX_R7, INFIX_R8, INFIX_R9] n)
                        (yytext,!lno,!lno)
  |  (_,_) => INFIX_UNREGD(yytext,!lno,!lno)))
| 138 => (INT (makeInt yytext,!lno,!lno))
| 142 => (RELINT ((false,makeInt (substring (yytext,1,size(yytext)-1))),!lno,!lno))
| 146 => (RELINT ((true,makeInt (substring (yytext,1,size(yytext)-1))),!lno,!lno))
| 15 => (CHOICE(!lno,!lno))
| 150 => (STRING (substring (yytext,1,size(yytext)-2),!lno,!lno))
| 17 => (BAR(!lno,!lno))
| 174 => (ID(yytext,!lno,!lno))
| 177 => (case  KeyWord.find yytext
	                 of SOME v => v (!lno,!lno)
	                  | _ => ID (yytext,!lno,!lno))
| 185 => (ID (yytext,!lno,!lno))
| 19 => (COLON(!lno,!lno))
| 193 => (ID (yytext,!lno,!lno))
| 195 => (errmsg "Lego lexer"
	                      ("ignoring bad character "^yytext,!lno,!lno); 
                       lex())
| 198 => (commentLevel := !commentLevel+1; lex())
| 201 => (commentLevel := !commentLevel-1;
                       if (!commentLevel=0) then YYBEGIN INITIAL else ();
		       lex())
| 203 => (inc_lno(); lex())
| 205 => (lex())
| 208 => (inc_lno(); YYBEGIN INITIAL; lex())
| 21 => (COMMA(!lno,!lno))
| 25 => (CONTRACT(!lno,!lno))
| 28 => (YYBEGIN C; commentLevel := 1; lex())
| 31 => (YYBEGIN D; lex())
| 34 => (DOT1(!lno,!lno))
| 37 => (DOT2(!lno,!lno))
| 39 => (DOT(!lno,!lno))
| 4 => (lex())
| 41 => (UPARR(!lno,!lno))
| 43 => (EQUAL(!lno,!lno))
| 46 => (GUESS(!lno,!lno))
| 48 => (HASH(!lno,!lno))
| 50 => (LCBR(!lno,!lno))
| 52 => (LPTBR(!lno,!lno))
| 54 => (LRBR(!lno,!lno))
| 57 => (DOLLARSQ(!lno,!lno))
| 60 => (STARSQ(!lno,!lno))
| 66 => (DOLLARSAVE(!lno,!lno))
| 7 => (SLASHS(!lno,!lno))
| 72 => (DOLLARGOAL(!lno,!lno))
| 75 => (PCTPCT(!lno,!lno))
| 77 => (PCT(!lno,!lno))
| 79 => (LSQBR(!lno,!lno))
| 81 => (QM(!lno,!lno))
| 83 => (RCBR(!lno,!lno))
| 85 => (RPTBR(!lno,!lno))
| 87 => (RRBR(!lno,!lno))
| 89 => (RSQBR(!lno,!lno))
| 91 => (SEMICOLON(!lno,!lno))
| 93 => (TILDE(!lno,!lno))
| 95 => (UNDERSCORE(!lno,!lno))
| 98 => (CASE(!lno,!lno))
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := !yygone+i0;
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = ordof(!yyb,l)
		val NewState = if NewChar<128 then ordof(trans,NewChar) else ordof(trans,128)
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
